begin_parse -> declarations

declarations -> declaration declarations | EPSILON

declaration ->variable_dec | function_dec | structure_dec


structure_dec -> STRUCT identifier { structure_content  } ;
structure_content -> variable_dec structure_content | EPSILON
variable_dec -> datatype variables ; | structure_initialize

structure_initialize -> STRUCT identifier variables

variables -> identifier_name multiple_variables

multiple_variables -> , variables | EPSILON

function_dec -> function_datatype function_parameters

function_datatype -> datatype identifier (

function_parameters -> parameters ) statement

parameters -> datatype all_parameter_identifiers | EPSILON

all_parameter_identifiers -> parameter_identifier multiple_parameters

multiple_parameters -> , parameters | EPSILON

parameter_identifier -> identifier extended_parameter

extended_parameter -> [ ] | EPSILON

identifier_name -> identifier extended_identifier

extended_identifier -> array_identifier | = expression  

array_identifier -> [ array_dims | EPSILON 

array_dims -> integer_constant ] initilization | ] string_initilization

initilization -> string_initilization | array_initialization | EPSILON

string_initilization -> = string_constant 

array_initialization -> = { array_values }

array_values -> integer_constant multiple_array_values
 
multiple_array_values -> , array_values | EPSILON


datatype -> INT | CHAR | FLOAT | DOUBLE | LONG long_grammar | SHORT short_grammar | UNSIGNED unsigned_grammar | SIGNED signed_grammar | VOID 

unsigned_grammar -> INT | LONG long_grammar | SHORT short_grammar | EPSILON

signed_grammar -> INT | LONG long_grammar | SHORT short_grammar | EPSILON

long_grammar -> INT | EPSILON

short_grammar -> INT | EPSILON

statement -> expression_statment | multiple_statement | conditional_statements | iterative_statements | return_statement | break_statement | variable_dec

multiple_statement -> { statments }

statments -> statement statments | EPSILON

expression_statment -> expression ; | ; 

conditional_statements -> IF ( simple_expression ) statement extended_conditional_statements

extended_conditional_statements -> ELSE statement | EPSILON

iterative_statements -> WHILE ( simple_expression ) statement | FOR ( for_initialization simple_expression ; expression ) | DO statement WHILE ( simple_expression ) ;

for_initialization -> variable_dec | expression ; | ; 

return_statement -> RETURN return_suffix

return_suffix -> ; | expression ;

break_statement -> BREAK ;

expression -> iden expressions | simple_expression

expressions -> = expression | ADD_EQUAL expression | SUBTRACT_EQUAL expression | MULTIPLY_EQUAL expression | DIVIDE_EQUAL expression | MOD_EQUAL expression | INCREMENT | DECREMENT

simple_expression -> and_expression simple_expression_breakup

simple_expression_breakup -> OR_OR and_expression simple_expression_breakup | EPSILON

and_expression -> unary_relation_expression and_expression_breakup

and_expression_breakup -> AND_AND unary_relation_expression and_expression_breakup | EPSILON

unary_relation_expression -> NOT unary_relation_expression | regular_expression

regular_expression -> sum_expression regular_expression_breakup

regular_expression_breakup -> relational_operators sum_expression | EPSILON

relational_operators -> GREAT_EQUAL | LESS_EQUAL | GREAT | LESS | EQUAL | NOT_EQUAL
sum_expression -> term sum_expression'
sum_expression' -> sum_operators term sum_expression' | EPSILON

sum_operators -> + | -

term -> factor term'
term' -> multiply_operators factor term' | EPSILON

multiply_operators -> * | / | %

factor -> func | iden

iden -> identifier iden'
iden' -> extended_iden iden' | EPSILON

extended_iden -> [ expression ] | . identifier

func -> ( expression ) | func_call | constant

func_call -> identifier ( arguments )

arguments -> arguments_list | EPSILON

arguments_list -> expression extended_arguments

extended_arguments -> , expression extended_arguments | EPSILON

constant -> integer_constant | string_constant | float_constant | character_constant




